#
# GitLab Continuous Integration (GitLab CI/CD)  https://docs.gitlab.com/ee/ci/
#
# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
#
# This pipeline scipt will run "mvn test".
#
# * Caches downloaded dependencies and plugins between invocation.

image: dockerhub.cloud.queo.org/queo.software/java/commons/queo-commons-gitlabci:latest

# this script has only one stange, in order to run it as fast as possible (not to run maven compile twice)
stages:
  - test


variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true -DskipFlywayInconsistencyTests=true"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

# copy maven settings.xml to Maven default location
# create materpassword file for Maven: https://maven.apache.org/guides/mini/guide-encryption.html
#   plain: pwsafe://id=7189        
#   encrpted: pwsafe://id=7190
before_script:
  - mkdir -p /root/.m2/repository
  - cp .m2/settings.xml /root/.m2/settings.xml  
  - echo "<settingsSecurity><master>${MAVEN_MASTER_PASSWORD_ENCRYPTED}</master></settingsSecurity>" > /root/.m2/settings-security.xml

# test
test:test:
  stage: test
  script: 'mvn $MAVEN_CLI_OPTS test'
  artifacts:
    reports:
      junit:
        - '*/target/surefire-reports/TEST-*.xml'